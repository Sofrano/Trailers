//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `openWeb`.
    static let openWeb = Rswift.ImageResource(bundle: R.hostingBundle, name: "openWeb")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "openWeb", bundle: ..., traitCollection: ...)`
    static func openWeb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.openWeb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `LanguageTableViewCell`.
    static let languageTableViewCell = _R.nib._LanguageTableViewCell()
    /// Nib `PagerTableViewCell`.
    static let pagerTableViewCell = _R.nib._PagerTableViewCell()
    
    /// `UINib(name: "LanguageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageTableViewCell) instead")
    static func languageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageTableViewCell)
    }
    
    /// `UINib(name: "PagerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pagerTableViewCell) instead")
    static func pagerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pagerTableViewCell)
    }
    
    static func languageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageTableViewCell? {
      return R.nib.languageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageTableViewCell
    }
    
    static func pagerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PagerTableViewCell? {
      return R.nib.pagerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PagerTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `LanguageTableViewCell`.
    static let languageTableViewCell: Rswift.ReuseIdentifier<LanguageTableViewCell> = Rswift.ReuseIdentifier(identifier: "LanguageTableViewCell")
    /// Reuse identifier `PagerTableViewCell`.
    static let pagerTableViewCell: Rswift.ReuseIdentifier<PagerTableViewCell> = Rswift.ReuseIdentifier(identifier: "PagerTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 12 storyboards.
  struct storyboard {
    /// Storyboard `CastingListView`.
    static let castingListView = _R.storyboard.castingListView()
    /// Storyboard `EntryPointView`.
    static let entryPointView = _R.storyboard.entryPointView()
    /// Storyboard `GenreListView`.
    static let genreListView = _R.storyboard.genreListView()
    /// Storyboard `GenresPagerView`.
    static let genresPagerView = _R.storyboard.genresPagerView()
    /// Storyboard `ImageListView`.
    static let imageListView = _R.storyboard.imageListView()
    /// Storyboard `LanguageView`.
    static let languageView = _R.storyboard.languageView()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MovieWallView`.
    static let movieWallView = _R.storyboard.movieWallView()
    /// Storyboard `TextListView`.
    static let textListView = _R.storyboard.textListView()
    /// Storyboard `VideoListView`.
    static let videoListView = _R.storyboard.videoListView()
    /// Storyboard `YTView`.
    static let ytView = _R.storyboard.ytView()
    
    /// `UIStoryboard(name: "CastingListView", bundle: ...)`
    static func castingListView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.castingListView)
    }
    
    /// `UIStoryboard(name: "EntryPointView", bundle: ...)`
    static func entryPointView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.entryPointView)
    }
    
    /// `UIStoryboard(name: "GenreListView", bundle: ...)`
    static func genreListView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.genreListView)
    }
    
    /// `UIStoryboard(name: "GenresPagerView", bundle: ...)`
    static func genresPagerView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.genresPagerView)
    }
    
    /// `UIStoryboard(name: "ImageListView", bundle: ...)`
    static func imageListView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.imageListView)
    }
    
    /// `UIStoryboard(name: "LanguageView", bundle: ...)`
    static func languageView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.languageView)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MovieWallView", bundle: ...)`
    static func movieWallView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.movieWallView)
    }
    
    /// `UIStoryboard(name: "TextListView", bundle: ...)`
    static func textListView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.textListView)
    }
    
    /// `UIStoryboard(name: "VideoListView", bundle: ...)`
    static func videoListView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.videoListView)
    }
    
    /// `UIStoryboard(name: "YTView", bundle: ...)`
    static func ytView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ytView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 10 localization keys.
    struct localizable {
      /// en translation: Add to watchlist
      /// 
      /// Locales: en, ru
      static let addWatchList = Rswift.StringResource(key: "addWatchList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Cast
      /// 
      /// Locales: en, ru
      static let cast = Rswift.StringResource(key: "cast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Images
      /// 
      /// Locales: en, ru
      static let images = Rswift.StringResource(key: "images", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Production Status
      /// 
      /// Locales: en, ru
      static let productionStatus = Rswift.StringResource(key: "productionStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: See all
      /// 
      /// Locales: en, ru
      static let seeAll = Rswift.StringResource(key: "seeAll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Unknown error
      /// 
      /// Locales: en, ru
      static let errorUnknown = Rswift.StringResource(key: "error.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Video
      /// 
      /// Locales: en, ru
      static let video = Rswift.StringResource(key: "video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: VideoKey is not specified for video playback.
      /// 
      /// Locales: en, ru
      static let errorYtVideoKey = Rswift.StringResource(key: "error.yt.videoKey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Videos
      /// 
      /// Locales: en, ru
      static let videos = Rswift.StringResource(key: "videos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Welcome to the Trailers app! Choose a language that will be a priority when selecting content
      /// 
      /// Locales: en, ru
      static let welcome = Rswift.StringResource(key: "welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      
      /// en translation: Add to watchlist
      /// 
      /// Locales: en, ru
      static func addWatchList(_: Void = ()) -> String {
        return NSLocalizedString("addWatchList", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cast
      /// 
      /// Locales: en, ru
      static func cast(_: Void = ()) -> String {
        return NSLocalizedString("cast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Images
      /// 
      /// Locales: en, ru
      static func images(_: Void = ()) -> String {
        return NSLocalizedString("images", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Production Status
      /// 
      /// Locales: en, ru
      static func productionStatus(_: Void = ()) -> String {
        return NSLocalizedString("productionStatus", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See all
      /// 
      /// Locales: en, ru
      static func seeAll(_: Void = ()) -> String {
        return NSLocalizedString("seeAll", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown error
      /// 
      /// Locales: en, ru
      static func errorUnknown(_: Void = ()) -> String {
        return NSLocalizedString("error.unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Video
      /// 
      /// Locales: en, ru
      static func video(_: Void = ()) -> String {
        return NSLocalizedString("video", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VideoKey is not specified for video playback.
      /// 
      /// Locales: en, ru
      static func errorYtVideoKey(_: Void = ()) -> String {
        return NSLocalizedString("error.yt.videoKey", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Videos
      /// 
      /// Locales: en, ru
      static func videos(_: Void = ()) -> String {
        return NSLocalizedString("videos", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome to the Trailers app! Choose a language that will be a priority when selecting content
      /// 
      /// Locales: en, ru
      static func welcome(_: Void = ()) -> String {
        return NSLocalizedString("welcome", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _LanguageTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LanguageTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "LanguageTableViewCell"
      let name = "LanguageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PagerTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PagerTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PagerTableViewCell"
      let name = "PagerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PagerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PagerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try castingListView.validate()
      try entryPointView.validate()
      try genreListView.validate()
      try genresPagerView.validate()
      try imageListView.validate()
      try languageView.validate()
      try launchScreen.validate()
      try main.validate()
      try movieWallView.validate()
      try textListView.validate()
      try videoListView.validate()
      try ytView.validate()
    }
    
    struct castingListView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CastingListViewController
      
      let bundle = R.hostingBundle
      let castingListViewController = StoryboardViewControllerResource<CastingListViewController>(identifier: "CastingListViewController")
      let name = "CastingListView"
      
      func castingListViewController(_: Void = ()) -> CastingListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: castingListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.castingListView().castingListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'castingListViewController' could not be loaded from storyboard 'CastingListView' as 'CastingListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct entryPointView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EntryPointViewController
      
      let bundle = R.hostingBundle
      let entryPointViewController = StoryboardViewControllerResource<EntryPointViewController>(identifier: "EntryPointViewController")
      let name = "EntryPointView"
      
      func entryPointViewController(_: Void = ()) -> EntryPointViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: entryPointViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon' is used in storyboard 'EntryPointView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.entryPointView().entryPointViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'entryPointViewController' could not be loaded from storyboard 'EntryPointView' as 'EntryPointViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct genreListView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = GenreListViewController
      
      let bundle = R.hostingBundle
      let genreListViewController = StoryboardViewControllerResource<GenreListViewController>(identifier: "GenreListViewController")
      let name = "GenreListView"
      
      func genreListViewController(_: Void = ()) -> GenreListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: genreListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.genreListView().genreListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'genreListViewController' could not be loaded from storyboard 'GenreListView' as 'GenreListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct genresPagerView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let genresPagerViewController = StoryboardViewControllerResource<GenresPagerViewController>(identifier: "GenresPagerViewController")
      let name = "GenresPagerView"
      
      func genresPagerViewController(_: Void = ()) -> GenresPagerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: genresPagerViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.genresPagerView().genresPagerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'genresPagerViewController' could not be loaded from storyboard 'GenresPagerView' as 'GenresPagerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct imageListView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ImageListViewController
      
      let bundle = R.hostingBundle
      let imageListViewController = StoryboardViewControllerResource<ImageListViewController>(identifier: "ImageListViewController")
      let name = "ImageListView"
      
      func imageListViewController(_: Void = ()) -> ImageListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.imageListView().imageListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageListViewController' could not be loaded from storyboard 'ImageListView' as 'ImageListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct languageView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LanguageViewController
      
      let bundle = R.hostingBundle
      let languageViewController = StoryboardViewControllerResource<LanguageViewController>(identifier: "LanguageViewController")
      let name = "LanguageView"
      
      func languageViewController(_: Void = ()) -> LanguageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.languageView().languageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageViewController' could not be loaded from storyboard 'LanguageView' as 'LanguageViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct movieWallView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MovieWallViewController
      
      let bundle = R.hostingBundle
      let movieWallViewController = StoryboardViewControllerResource<MovieWallViewController>(identifier: "MovieWallViewController")
      let name = "MovieWallView"
      
      func movieWallViewController(_: Void = ()) -> MovieWallViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieWallViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.movieWallView().movieWallViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieWallViewController' could not be loaded from storyboard 'MovieWallView' as 'MovieWallViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct textListView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TextListViewController
      
      let bundle = R.hostingBundle
      let name = "TextListView"
      let textListViewController = StoryboardViewControllerResource<TextListViewController>(identifier: "TextListViewController")
      
      func textListViewController(_: Void = ()) -> TextListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: textListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.textListView().textListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'textListViewController' could not be loaded from storyboard 'TextListView' as 'TextListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct videoListView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = VideoListViewController
      
      let bundle = R.hostingBundle
      let name = "VideoListView"
      let videoListViewController = StoryboardViewControllerResource<VideoListViewController>(identifier: "VideoListViewController")
      
      func videoListViewController(_: Void = ()) -> VideoListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.videoListView().videoListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoListViewController' could not be loaded from storyboard 'VideoListView' as 'VideoListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct ytView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = YTViewController
      
      let bundle = R.hostingBundle
      let name = "YTView"
      let ytViewController = StoryboardViewControllerResource<YTViewController>(identifier: "YTViewController")
      
      func ytViewController(_: Void = ()) -> YTViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ytViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.ytView().ytViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ytViewController' could not be loaded from storyboard 'YTView' as 'YTViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
